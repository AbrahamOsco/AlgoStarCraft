@startuml
'https://plantuml.com/class-diagram

abstract class Edificio {
    -hp: HitPoints
    #turnosRestantesParaSerOperativo: Int
    #ubicacion: Ubicacion
    #entidad: IDEDIFICIO
    #costoMineral: int
    #costoGas: int
    #raza: Raza

    +Edificio(turnosRestantesParaSerOperativo: Int,mineralNecesario: Int,gasNecesario: Int)
    +Edificio(turnosRestantesParaSerOperativo: Int,HP: HitPoints,mineralNecesario: Int,gasNecesario: Int)
    +Edificio(HP: HitPoints)
    +verififarEdificioOperativo(): void
    +ejecutarTurno():void
    +asignarHP(HP: HitPoints): void
    + {abstract} construirEdificioEn(recurso: Recurso): void
    + verificarSiPuedeSerConstruidoSegunRecursos(unidadesDeMineral:GestionRecurso, unidadesDeGas:GestionRecurso): void
    + {abstract} verificarSiPuedeSerConstruido(unidadesDeMineral:GestionRecurso, unidadesDeGas:GestionRecurso): void
    +consumirGas(UnidadesDeGas:GestionRecurso):void
    +consumirMineral(UnidadesDeMineral:GestionRecurso):void
    +recibirDaño(daño: Int): void
    +regeneracionFinDeTurno(): void
    +vidaActual():Int
    +escudoActual():Int
    + ubicar(unLugar:Ubicacion): void
    + distancia(unaUbicacion: Ubicacion): int
    +recibirAtaque(unAtaque: Ataque): void
    + {abstract} fueAgregado(raza: Raza): void
    +desalojar():void
    +ubicacion(): Ubicacion
    +{abstract} instalar(tierra: Tierra): void
    +{abstract} instalar(moho: Moho): void
    +disminuirCapacidad(unaRaza: Raza): void
    +getEntidad(): IDEDIFICIO
}

class Extractor{
    -CANTIDAD_TURNOS_OPERATIVO
    -zanganos: ArrayList

    +Extractor()
    +agregarZangano(zangano: Unidad): void
    +extraer(recurso: Recurso): GestionRecurso
    +evolucionarLarvaAHidra(larva : Larva):void
    +evolucionarLarvaAZerli(larva : Larva):void
    +construirEdificioEn(recurso: Recurso):void
    +verificarSiPuedeSerConstruido(unidadesDeMineral:GestionRecurso, unidadesDeGas:GestionRecurso): void
    +instalar(moho: Moho): void
    +evolucionarLarva(): void
    +agregarseAEstaRaza(razaZerg: RazaZerg): void
    +crearMutalisco():void
    + fueAgregado(raza: Raza): void
    -verificarExtractorCantidadMaximaDeZanganos():void
}

class Espiral{
    -CANTIDAD_TURNOS_OPERATIVO
    +Espiral()
    +agregarZangano(unZangano: Unidad):void
    +extraer(unREcurso: Recurso): GestionRecurso
    +evolucionarLarvaAHidra(unaLarva: Larva): void
    +evolucionarLarvaAZerli(unaLarva: Larva): void
    +crearMutalisco(): void
    +construirEdificioEn(recurso: Recurso): void
    +verificarSiPuedeSerConstruido(unidadesDeMineral: GestionRecurso, unidadesDeGas: GestionRecurso): void
    +fueAgregado(raza: Raza): void
    +instalar(tierra: Tierra): void
    +instalar(moho: moho): void
    +evolucionarLarva():void
    +agregarseAEstaRaza(razaZerg: RazaZerg) void
}

class Guarida{
    -CANTIDAD_TURNOS_OPERATIVO

    +Guarida()
    +Guarida(hp: HitPoints)
    +evolucionarLarvaAHidra(unaLarva: Larva): void
    +evolucionarLarvaAZerli(unaLarva: Larva): void
    +construirEdificioEn(recurso: Recurso): void
    +verificarSiPuedeSerConstruido(unidadesDeMineral:GestionRecurso, unidadesDeGas:GestionRecurso): void
    +fueAgregado(raza: Raza): void
    +instalar(tierra: Tierra): void
    +instalar(moho: Moho): void
    +evolucionarLarva(): void
    +agregarseAEstaRaza(razaZerg: RazaZerg): void
    +crearMutalisco(): void
    +agregarZangano(zangano: Unidad): void
    +extraer(recurso: Recurso): GestionRecurso



}
interface Atacable {
    +recibirAtaque(ataque: Ataque)
}

Edificio <|-- Extractor
Edificio <|-- Espiral
Edificio <|-- Guarida
Atacable <|.. Edificio

@enduml