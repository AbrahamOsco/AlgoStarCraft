@startuml
'https://plantuml.com/class-diagram

class NexoMineral{
    -CANTIDAD_TURNOS_OPERATIVO: int
    -CANTIDAD_EXTRACCION: int
    -nodoMineral: NodoMineral

    +NexoMineral(nodoMineral: NodoMineral )
    +extraer():GestionRecurso
    +construirEdificioEn(recurso: Recurso): void
    +verificarSiPuedeSerConstruido(uDeMineral:GestionRecurso, uDeGas:GestionRecurso)
    + fueAgregado(raza: Raza): void
    +instalar(tierra: Tierra)
    +instalar(moho: Moho)

}

class Pilon{
    -CANTIDAD_TURNOS_OPERATIVO

    +Pilon()
    +Pilon(hp: HitPoints)
    +energizar()
    +construirEdificioEn(recurso: Recurso)
    +verificarSiPuedeSerConstruido(uDeMineral:GestionRecurso, uDeGas:GestionRecurso)
    +instalar(tierra: Tierra)
    +instalar(moho: Moho)
    + enRango(unaUbicacion: Ubicacion): Void
    + enRango(unaUbicacion: Ubicacion, lista: ArrayList): Void
    + fueAgregado(raza: Raza)
    +disminuirCapacidad(unaRaza: Raza)
    +ubicarPilon(unaUbicacion: Ubicacion, unMapa: Mapa)
    +desalojarPilon(unMapa: Mapa)
}

class Asimilador{
    -CANTIDAD_TURNOS_OPERATIVO: int

    +Asimilador()
    +prepararCapsula()
    +extraer(unVolcan: Volcan): GestionRecurso
    +construirEdificioEn(recurso: Recurso)
    +verificarSiPuedeSerConstruido(uDeMineral:GestionRecurso, uDeGas:GestionRecurso)
    +fueAgregado(raza: Raza)
    +instalar(tierra: Tierra)
    +instalar(moho: Moho)
}



interface Atacable {
    +recibirAtaque(ataque: Ataque)
}


abstract class Edificio {
    -hp: HitPoints
        #turnosRestantesParaSerOperativo: Int
        #ubicacion: Ubicacion
        #entidad: IDEDIFICIO
        #costoMineral: int
        #costoGas: int
        #raza: Raza

        +Edificio(turnosRestantesParaSerOperativo: Int,mineralNecesario: Int,gasNecesario: Int)
        +Edificio(turnosRestantesParaSerOperativo: Int,HP: HitPoints,mineralNecesario: Int,gasNecesario: Int)
        +Edificio(HP: HitPoints)
        +verififarEdificioOperativo(): void
        +ejecutarTurno():void
        +asignarHP(HP: HitPoints): void
        + {abstract} construirEdificioEn(recurso: Recurso): void
        + verificarSiPuedeSerConstruidoSegunRecursos(unidadesDeMineral:GestionRecurso, unidadesDeGas:GestionRecurso): void
        + {abstract} verificarSiPuedeSerConstruido(unidadesDeMineral:GestionRecurso, unidadesDeGas:GestionRecurso): void
        +consumirGas(UnidadesDeGas:GestionRecurso):void
        +consumirMineral(UnidadesDeMineral:GestionRecurso):void
        +recibirDaño(daño: Int): void
        +regeneracionFinDeTurno(): void
        +vidaActual():Int
        +escudoActual():Int
        + ubicar(unLugar:Ubicacion): void
        + distancia(unaUbicacion: Ubicacion): int
        +recibirAtaque(unAtaque: Ataque): void
        + {abstract} fueAgregado(raza: Raza): void
        +desalojar():void
        +ubicacion(): Ubicacion
        +{abstract} instalar(tierra: Tierra): void
        +{abstract} instalar(moho: Moho): void
        +disminuirCapacidad(unaRaza: Raza): void
        +getEntidad(): IDEDIFICIO
}

Edificio <|-- NexoMineral
Edificio <|-- Pilon
Edificio <|-- Asimilador
Atacable <|.. Edificio
@enduml