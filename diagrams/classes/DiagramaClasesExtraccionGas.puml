@startuml


interface Ejecutable {
   + {abstract} ejecutarTurno(r: RazaRecursos): void
}


class Extractor{
   + Extractor(v: Volcan)
   + agregarZangano(z: Zangano)
   + ejecutarTurno(r: RazaRecursos): void
}

note left of Extractor::ejecutarTurno
   ...
   regenerar();
   // los zanganos extraen gas por ejecutarTurno
end note




class Zangano {
   + setTrabajo(t: TrabajoZangano): void
   + ejecutarTurno(r: RazaRecursos): void
   - extraer()
}


abstract class TrabajoZangano {
   # recurso : Recurso
   + {abstract} extraer(r: RazaRecursos): void
}



class Asimilador{
   + Asimilador(v: Volcan)
   + extraer(): void
   + ejecutarTurno(): void
}
note left of Asimilador::extraer
  int gasExtraido = v.extraer(20);
  // actualizarRazaRecusos
end note

abstract class Recurso {
   # unidades: int
   + {abstract} extraer(unidades: int): int
}


class NodoMineral {
   + NodoMineral()
+extraer(unidades: int): int
}

class Volcan{
   + Volcan()
   + extraer(unidades: int): int
}
note left of Volcan::Volcan
   this.unidades = 5000
end note
note right of Volcan::extraer
   int retorno = unidades;
   if (this.unidades == 0){
      thorw new RecursosSinUnidadesError();
   }f

   if (this.unidades < unidades){
      retorno = this.unidades;
      this.unidades = 0;
   }else{
      this.unidades -= unidades;
   }
   return retorno;

end note






Recurso <|-- Volcan
Recurso <|-- NodoMineral

Extractor ..|> Ejecutable
Extractor "1"-->"0..3" Zangano




Asimilador ..|> Ejecutable
Asimilador --> Volcan

Extractor --> Volcan

Zangano --> TrabajoZangano
Zangano ..|> Ejecutable


TrabajoZangano --> Recurso
@enduml